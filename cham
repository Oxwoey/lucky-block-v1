local Highlight = {}
Highlight.__index = Highlight

-- Сервисы
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

-- Константы
local DEFAULT_COLOR = Color3.new(1, 1, 1)
local DEFAULT_TRANSPARENCY = 0.5
local NEON_MATERIAL = Enum.Material.Neon
local IGNORED_INSTANCES = {
    "Shirt", "Pants", "ShirtGraphic", "BodyColors", "LuaSourceContainer"
}

-- Локальные переменные
local highlights = {}
local updateConnection
local highlightGui

--[[
    Внутренние функции
]]

local function validateColor(input)
    return typeof(input) == "BrickColor" and input.Color or input
end

local function safeClone(original)
    local clone = original:Clone()
    
    -- Очистка ненужных свойств
    if clone:IsA("MeshPart") then
        clone.TextureID = ""
    end
    
    for _, child in ipairs(clone:GetChildren()) do
        if child:IsA("SpecialMesh") then
            child.TextureId = ""
        elseif child:IsA("Texture") or child:IsA("Decal") then
            child:Destroy()
        end
    end
    
    return clone
end

local function createHighlightGui()
    if highlightGui and highlightGui.Parent then return end

    highlightGui = Instance.new("ScreenGui", CoreGui)
    highlightGui.Name = "AdvancedHighlight"
    highlightGui.IgnoreGuiInset = true
    highlightGui.ResetOnSpawn = false
    highlightGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local viewport = Instance.new("ViewportFrame", highlightGui)
    viewport.Name = "Viewport"
    viewport.Size = UDim2.fromScale(1, 1)
    viewport.BackgroundTransparency = 1
    viewport.CurrentCamera = Workspace.CurrentCamera
    viewport.ImageTransparency = DEFAULT_TRANSPARENCY

    return viewport
end

local function startUpdateLoop()
    if updateConnection then return end
    
    updateConnection = RunService.RenderStepped:Connect(function()
        for original, data in pairs(highlights) do
            if original.Parent then
                for part, clone in pairs(data.parts) do
                    clone.CFrame = part.CFrame
                end
            else
                Highlight.Remove(original)
            end
        end
    end)
end

--[[
    Публичные методы
]]

function Highlight.Initialize()
    createHighlightGui()
    startUpdateLoop()
end

function Highlight.Apply(target, options)
    Highlight.Initialize()
    
    options = options or {}
    local color = validateColor(options.Color or DEFAULT_COLOR)
    local transparency = options.Transparency or DEFAULT_TRANSPARENCY
    local allowClothing = options.AllowClothing or false

    if highlights[target] then
        Highlight.Remove(target)
    end

    local highlightData = {
        parts = {},
        connections = {},
        model = Instance.new("Model", highlightGui.Viewport)
    }

    local function processPart(part)
        if not part:IsA("BasePart") then return end
        
        local clone = safeClone(part)
        clone.Parent = highlightData.model
        clone.Color = color
        clone.Material = NEON_MATERIAL
        clone.Transparency = 0

        highlightData.parts[part] = clone

        -- Отслеживание изменений
        highlightData.connections[part] = {
            part:GetPropertyChangedSignal("Color"):Connect(function()
                clone.Color = validateColor(part.Color)
            end),
            
            part.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    Highlight.Remove(target)
                end
            end)
        }
    end

    if target:IsA("Model") then
        for _, child in ipairs(target:GetDescendants()) do
            if child:IsA("BasePart") then
                if allowClothing or not table.find(IGNORED_INSTANCES, child.ClassName) then
                    processPart(child)
                end
            end
        end
    elseif target:IsA("BasePart") then
        processPart(target)
    end

    highlights[target] = highlightData
    return true
end

function Highlight.Remove(target)
    if not highlights[target] then return end

    local data = highlights[target]
    for _, connection in pairs(data.connections) do
        connection:Disconnect()
    end

    data.model:Destroy()
    highlights[target] = nil
end

function Highlight.ClearAll()
    for target in pairs(highlights) do
        Highlight.Remove(target)
    end
end

function Highlight.SetTransparency(value)
    if highlightGui and highlightGui.Viewport then
        highlightGui.Viewport.ImageTransparency = math.clamp(value, 0, 1)
    end
end

function Highlight.Toggle(enabled)
    if highlightGui then
        highlightGui.Enabled = enabled
    end
end

return Highlight
